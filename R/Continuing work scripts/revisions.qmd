---
title: "distance_revisions"
author: "carly lovas"
format: 
  html:
    toc: true
    self-contained: true
editor: visual
---

```{r}
#| label: data prep
#| echo: false
#| message: false
#| warning: false 

# Libraries ----
library(here)
library(tidyverse)
library(gmRi)
library(matrixStats)
library(patchwork)
library(broom)
library(rmarkdown)
library(shiny)
library(marginaleffects)
library(ggeffects)
library(gridExtra)
library(ggdist)

# Load and preliminary cleaning of raw data ----
survdat <- readRDS(here::here("Data/survdat_lw.rds"))$survdat |>
    as.data.frame()

# Some clean up
trawldat <- janitor::clean_names(survdat)

# Add in species common name
spp_classes <- readr::read_csv(here::here("Data/sppclass.csv"),
    col_types = readr::cols()
)
spp_classes <- janitor::clean_names(spp_classes)
spp_classes <- dplyr::mutate(
    .data = spp_classes, comname = stringr::str_to_lower(common_name),
    scientific_name = stringr::str_to_lower(scientific_name)
)
spp_classes <- dplyr::distinct(spp_classes, svspp, comname, scientific_name)
trawldat <- dplyr::mutate(trawldat, svspp = stringr::str_pad(svspp, 3, "left", "0"))
trawldat <- dplyr::left_join(trawldat, spp_classes, by = "svspp")

# Creating a unique tow ID column
trawldat <- dplyr::mutate(.data = trawldat, cruise6 = stringr::str_pad(
    cruise6,
    6, "left", "0"
), station = stringr::str_pad(
    station,
    3, "left", "0"
), stratum = stringr::str_pad(
    stratum,
    4, "left", "0"
), id = stringr::str_c(
    cruise6, station,
    stratum
))

# Adding a date column
trawldat <- dplyr::mutate(.data = trawldat, est_month = stringr::str_sub(
    est_towdate,
    6, 7
), est_month = as.numeric(est_month), est_day = stringr::str_sub(
    est_towdate,
    -2, -1
), est_day = as.numeric(est_day), .before = season)

# Column names/formatting
trawldat <- dplyr::mutate(.data = trawldat, comname = tolower(comname), id = format(id, scientific = FALSE), svspp = as.character(svspp), svspp = stringr::str_pad(svspp, 3, "left", "0"), season = stringr::str_to_title(season), strat_num = stringr::str_sub(stratum, 2, 3))
trawldat <- dplyr::rename(.data = trawldat, biomass_kg = biomass, length_cm = length)

# Dealing with when there is biomass/no abundance, or abundance but no biomass
trawldat <- dplyr::mutate(.data = trawldat, biomass_kg = ifelse(biomass_kg == 0 & abundance > 0, 1e-04, biomass_kg), abundance = ifelse(abundance == 0 & biomass_kg > 0, 1, abundance))
trawldat <- dplyr::filter(.data = trawldat, !is.na(biomass_kg), !is.na(abundance))

# Filtering strata not regularly sampled throughout the time series
trawldat <- dplyr::filter(.data = trawldat, stratum >= 1010, stratum <= 1760, stratum != 1310, stratum != 1320, stratum != 1330, stratum != 1350, stratum != 1410, stratum != 1420, stratum != 1490)

# Filtering species not regularly sampled (shrimps, others?)
trawldat <- dplyr::filter(.data = trawldat, !svspp %in% c(285:299, 305, 306, 307, 316, 323, 910:915, 955:961))
trawldat <- dplyr::filter(trawldat, !svspp %in% c(0, "000", 978, 979, 980, 998))

trawldat <- dplyr::filter(trawldat, year >= 1970)

# Getting distinct biomass values at the species level
dat_clean <- trawldat |>
    distinct(id, svspp, catchsex, comname, year, est_month, est_day, season, lat, lon, est_towdate, biomass_kg) |>
    group_by(id, svspp, comname, year, est_month, est_day, season, lat, lon, est_towdate) |>
    summarize("total_biomass_kg" = sum(biomass_kg)) |>
    ungroup()

# Species filtering ----
# Keep only species that were observed in at least 5 tows for each season and then in both seasons for at least 80% of survey years.
tow_spp <- dat_clean |>
    group_by(svspp, comname, year, season) |>
    summarise(tows = n_distinct(id)) |>
    filter(tows >= 5)

# 80% cut off (49 years)
cut <- (max(tow_spp$year) - min(tow_spp$year)) - floor(0.08 * (max(tow_spp$year) - min(tow_spp$year)))

tow_seas_spp <- tow_spp |>
    # 80% of years have both spring and fall
    group_by(svspp, comname, year) |>
    summarise(seasons = n_distinct(season)) |>
    filter(seasons == 2) |>
    group_by(svspp, comname) |>
    summarise(years = n_distinct(year)) |>
    filter(years >= cut)

# Summaries and saving prepped data ----
dat_out <- dat_clean |>
    filter(comname %in% tow_seas_spp$comname) |>
    filter(!year %in% c(2017,2020))

# Median trawl day ----
year_day <- dat_out |>
    mutate(year_day = lubridate::yday(est_towdate)) |>
    select(year, season, year_day, id)

delta_year_day<- year_day |> 
  group_by(year, season) |>
  summarise(median = median(year_day)) |>
  pivot_wider(names_from = "season", values_from = "median") |> 
  mutate(delta_year_day = (Fall-Spring))

```

```{r}
#| label: seasonal distance metrics
#| echo: false
#| message: false
#| warning: false

# Calculate center of biomass metrics by season ----
center_bio <- function(dat, ...){
  dat %>%
    group_by(comname, ...) %>%
    summarise(
      # Un-weighted averages
      total_biomass   = sum(total_biomass_kg),
      avg_biomass     = mean(total_biomass_kg),
      biomass_sd      = sd(total_biomass_kg),
      avg_lat         = weightedMean(lat, w = total_biomass_kg, na.rm = T),  
      avg_lon         = weightedMean(lon, w = total_biomass_kg, na.rm = T),
      .groups = "drop")
}

seas_cob <- center_bio(dat_out, year, season)

# Linear model with interaction ----
seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(trends = map(data, function(x){
    mod <- lm(avg_lat~year*season, data = x)
    slopes <- slopes(mod, variables = "year", by = "season", type = "response") |>
    select(!term) |>
    rename("term" = "season")
    return(slopes)
  })) |>
  select(!data) |>
  unnest(trends) -> seasonal_trends # name tbd

seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(outputs = map(data, function(x){
    mod <- lm(avg_lat~year*season, data = x)
    slopes <- slopes(mod, variables = "year", by = "season", type = "response", hypothesis = "pairwise")
    return(slopes)
  })) |>
  select(!data) |>
  unnest(outputs) -> difference_in_season

seasonal_trends |>
  full_join(difference_in_season) |> 
  arrange(comname) -> all_outputs

# Define movement trends and categories ----
all_outputs |>
  select(comname, term, estimate, p.value) |>
  mutate(signif   = ifelse(p.value <= 0.1, "true", "false"),
         movement = ifelse(estimate > 0, "+", "-")) -> output_trends

output_trends |>
  mutate(trend = case_when(
    term %in% c("Fall", "Spring") & signif == "true" & movement == "+" ~ "northward",
    term %in% c("Fall", "Spring") & signif == "true" & movement == "-" ~ "southward",
    term == "Fall - Spring" & signif == "true" & movement == "+" ~ "pos", # more different,
    term == "Fall - Spring" & signif == "true" & movement == "-" ~ "neg", # less different...?
    signif == "false" ~ "stable")) -> all_output_trends

# Movement categories ----

all_output_trends |>
  select(comname, term, trend) |>
  pivot_wider(names_from = "term", values_from = "trend") |>
  mutate(category = case_when(
    # contracting
    `Fall - Spring` == "neg" ~ "contracting",
    # marching
    `Fall` == "northward" & `Spring` == "northward" & `Fall - Spring` == "stable" ~ "marching",
    `Fall` == "southward" & `Spring` == "southward" & `Fall - Spring` == "stable" ~ "marching",
    # expanding
    `Fall - Spring` == "pos" ~ "expanding",
    # stable
    `Fall` == "stable" & `Spring` == "stable" & `Fall - Spring` == "stable" ~ "stable"
  )) -> lat_categories

lat_categories |>
  filter(is.na(category)) -> na_categories # need to plot them all to see why.........

# Calculating distance between spring and fall centroids ----
seasonal_dist <- seas_cob %>% 
  select(comname, year, season, avg_lat, avg_lon) %>%
  group_by(comname, year ) %>% 
  nest() 

point_dist <- function(df){
  temp <- sf::st_as_sf(df,coords=c("avg_lon","avg_lat"), crs=4326, remove=FALSE)
  temp <- sf::st_transform(temp, crs = 32619)
  out  <- sf::st_distance(temp$geometry)[1,2]
  return(out)
}

seasonal_dist <- seasonal_dist |>
  mutate(dist_m = map_dbl(data, possibly(point_dist, NA)), 
         dist_km = dist_m/1000) |>
  group_by(comname) |> 
  nest() |> 
  mutate(count = map_dbl(data, function(x){nrow(x)}), 
         season_dist = map(data, function(x){
           lm(dist_km ~ year, data = x) |> 
                          tidy() |> 
                          filter(term == "year")})) |> 
  unnest(season_dist) %>% 
  mutate(signif = ifelse(p.value <= 0.05, T, F)) 

# Save out the seasonal distance difference data for subsequent modeling ----
seasonal_dist_out <- seasonal_dist |>
    ungroup() |>
    select(comname, data) |>
    unnest(cols = c(data)) |>
    unnest(cols = c(data))
```

```{r}
#| label: same shit but with longitude
#| echo: false
#| message: false
#| warning: false

# Linear model with interaction ----
seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(trends = map(data, function(x){
    mod <- lm(avg_lon~year*season, data = x)
    slopes <- slopes(mod, variables = "year", by = "season", type = "response") |>
    select(!term) |>
    rename("term" = "season")
    return(slopes)
  })) |>
  select(!data) |>
  unnest(trends) -> lon_trends # name tbd

seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(outputs = map(data, function(x){
    mod <- lm(avg_lon~year*season, data = x)
    slopes <- slopes(mod, variables = "year", by = "season", type = "response", hypothesis = "pairwise")
    return(slopes)
  })) |>
  select(!data) |>
  unnest(outputs) -> difference_in_season_lon

lon_trends |>
  full_join(difference_in_season_lon) |> 
  arrange(comname) -> all_lon_outputs

# Define movement trends and categories ----
all_lon_outputs |>
  select(comname, term, estimate, p.value) |>
  mutate(signif   = ifelse(p.value <= 0.1, "true", "false"),
         movement = ifelse(estimate > 0, "+", "-")) -> output_lon_trends

output_lon_trends |>
  mutate(trend = case_when(
    term %in% c("Fall", "Spring") & signif == "true" & movement == "+" ~ "northward",
    term %in% c("Fall", "Spring") & signif == "true" & movement == "-" ~ "southward",
    term == "Fall - Spring" & signif == "true" & movement == "+" ~ "pos", # more different,
    term == "Fall - Spring" & signif == "true" & movement == "-" ~ "neg", # less different...?
    signif == "false" ~ "stable")) -> all_output_lon_trends

# Movement categories ----
all_output_lon_trends |>
  select(comname, term, trend) |>
  pivot_wider(names_from = "term", values_from = "trend") |>
  mutate(category = case_when(
    # contracting
    `Fall - Spring` == "neg" ~ "contracting",
    # marching
    `Fall` == "northward" & `Spring` == "northward" & `Fall - Spring` == "stable" ~ "marching",
    `Fall` == "southward" & `Spring` == "southward" & `Fall - Spring` == "stable" ~ "marching",
    # expanding
    `Fall - Spring` == "pos" ~ "expanding",
    # stable
    `Fall` == "stable" & `Spring` == "stable" & `Fall - Spring` == "stable" ~ "stable"
  )) -> lon_categories

lon_categories |> 
  select(comname, category) |>
  rename("lon_category" = "category") |>
  left_join(lat_categories |>
              select(comname, category) |>
              rename("lat_category" = "category")) |>
  mutate(match = ifelse(lon_category == lat_category, T,F)) |>
  arrange(desc(match)) -> lat_v_lon

```

```{r}
#| label: model outputs and plots
#| echo: false
#| message: false
#| warning: false
#| fig-align: center
#| fig-width: 7
#| fig-height: 5

# Bart's model outputs
bayes_coeff <- read_rds(here("Data", "bayes_coeff.rds"))

# minor edits to make plotting more neat
bayes_coeff <- bayes_coeff |>
  rename("estimate" = "r_functional_group:comname") |> 
  mutate(species = str_to_sentence(str_replace_all(species, "[.]", " ")), # removes . in the middle of species names
         z = estimate > 0)

# Plots
ggplot(bayes_coeff, aes(y = fct_reorder(species,estimate), 
                        x = estimate)) +
  geom_vline(xintercept = 0.0, color = "#535353", alpha = 0.7) +
  # geom_segment(aes(y = fct_reorder(species,estimate), x = 0, xend = estimate)) +
  geom_point(size = 2, alpha = 0.8) + 
  geom_pointinterval(aes(xmin = .lower, xmax = .upper))+
  ggtitle("Individual species response") +
  scale_color_gmri() + 
  theme_gmri(plot.title = element_text(size = 10),
             plot.subtitle = element_text(size = 9),
             # axis.text.y = element_blank(),
             axis.text.x = element_text(size = 9),
             axis.title.y = element_blank(),
             axis.title.x = element_text(size = 10)) 

spp_plots <- seas_cob |>
  left_join(lat_categories) |>
  group_by(comname, category) |>
  nest() |>
  mutate(plot = map2(data, comname, function(x,y){
    mod  <- lm(avg_lat~year*season, data = x)
    temp <- as.data.frame(ggpredict(mod, terms = ~year*season)) 
    plot <- ggplot() +
      geom_line(data = x, aes(x = year, y = avg_lat, group = season, color = season), linetype = 2, linewidth = 0.5) +
      geom_ribbon(data = temp, aes(x = x, ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.3) +
      geom_line(data = temp, aes(x = x, y = predicted, color = group)) +
      xlab("Year") + ylab("Predicted latitude") + ggtitle(str_to_sentence(comname), subtitle = category) +
      scale_color_gmri() + scale_fill_gmri() +
      theme_gmri(plot.subtitle = element_text(size = 12)) 
    return(plot)
    })) # either select individuals, group by functional group, or arrange all for supplement

marrangeGrob(spp_plots$plot, layout_matrix = matrix(1:1, nrow = 1, ncol = 1, byrow = TRUE), top = NULL)

# bayes_coeff |>
#   left_join(categories |> mutate(species = str_to_sentence(comname))) |>
# ggplot(aes(y = fct_reorder(species,estimate), 
#                         x = estimate)) +
#   geom_vline(xintercept = 0.0, color = "#535353", alpha = 0.7) +
#   # geom_segment(aes(y = fct_reorder(species,estimate), x = 0, xend = estimate)) +
#   geom_point(size = 2, alpha = 0.8) + 
#   geom_pointinterval(aes(xmin = .lower, xmax = .upper, color = category))+
#   ggtitle("Individual species response") +
#   scale_color_gmri() + 
#   theme_gmri(plot.title = element_text(size = 10),
#              plot.subtitle = element_text(size = 9),
#              # axis.text.y = element_blank(),
#              axis.text.x = element_text(size = 9),
#              axis.title.y = element_blank(),
#              axis.title.x = element_text(size = 10))
```

```{r}
#| label: maps...?
#| echo: false
#| message: false 
#| warning: false

library(rnaturalearth)
library(sf)

# Alewife example ----
alewife <- seas_cob |> filter(comname == "alewife") |>
  mutate(decade = 10*year%/%10)
alewife_lat <- as.data.frame(ggpredict((lm(avg_lat~year*season, data = alewife)), terms = ~year*season)) |>
  mutate(decade = 10*x%/%10) |>
   rename("predicted_lat" = "predicted")
alewife_lon <- as.data.frame(ggpredict((lm(avg_lon~year*season, data = alewife)), terms = ~year*season)) |>
  mutate(decade = 10*x%/%10) |>
  rename("predicted_lon" = "predicted")
alewife_mod <- alewife_lat |>
  select(x, predicted_lat, group, decade) |>
  left_join(alewife_lon |>
              select(x, predicted_lon, group, decade))

us <- ne_states(country = "united states of america")
can <- ne_states(country = "canada")

ggplot() +
  geom_sf(data = us) +
  geom_sf(data = can) +
  coord_sf(xlim = c(-66, -76), ylim = c(39, 46)) + 
  geom_point(data = alewife, aes(x = avg_lon, y = avg_lat, pch = season), alpha = 0.1, size = 3) +
  geom_point(data = alewife_mod, aes(x = predicted_lon, y = predicted_lat, color = group, alpha = x), size = 3)

# All species maps ----
seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(lat = map(data, function(x){
    out <- as.data.frame(ggpredict(lm(avg_lat~year*season, data = x), terms = ~year*season))
    return(out)
  })) |>
  unnest(lat) |>
  select(comname, x, predicted, group) |>
  rename("year" = "x",
         "lat_predicted" = "predicted") -> predicted_lat

seas_cob |>
  group_by(comname) |> 
  nest() |>
  mutate(lon = map(data, function(x){
    out <- as.data.frame(ggpredict(lm(avg_lon~year*season, data = x), terms = ~year*season))
    return(out)
  })) |>
  unnest(lon) |>
  select(comname, x, predicted, group) |>
  rename("year" = "x",
         "lon_predicted" = "predicted") -> predicted_lon

all_predicted_values <- predicted_lat |>
  left_join(predicted_lon)

all_predicted_values |>
  group_by(comname) |>
  nest(pred = c(2:5)) |>
  left_join(seas_cob |>
              group_by(comname) |>
              nest(raw = 2:8)) |>
  mutate(map = map2(raw, pred, function(x, y){
    us <- ne_states(country = "united states of america")
    can <- ne_states(country = "canada")
    map <- ggplot() +
      geom_sf(data = us) +
      geom_sf(data = can) +
      coord_sf(xlim = c(-66, -76), ylim = c(36, 46)) + 
      geom_point(data = x, aes(x = avg_lon, y = avg_lat, pch = season), alpha = 0.1, size = 3) +
      geom_point(data = y, aes(x = lon_predicted, y = lat_predicted, color = group, alpha = year), size = 3) +
      ggtitle(str_to_sentence(comname))
  })) -> maps

# marrangeGrob(maps$map, layout_matrix = matrix(1:1, nrow = 1, ncol = 1, byrow = TRUE), top = NULL)

## next question - in how many cases is spring outpacing the fall? 
```
  